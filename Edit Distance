///TC: exponential
SC:O(N+M)
class Solution { 
public: 
    int f(string word1, string word2,int i,int j){ 
        if(i<0){ 
            //insert 
            return j+1; 
        } 
        if(j<0){ 
            //delete 
            return i+1; 
        } 
        int ans=INT_MAX; 
        if(word1[i]==word2[j]){ 
            ans=f(word1,word2,i-1,j-1); 
        } 
        else{
            int op1=1+f(word1,word2,i-1,j-1); 
            int op2=1+f(word1,word2,i,j-1); 
            int op3=1+f(word1,word2,i-1,j); 
            int ans1=min({op1,op2,op3}); 
            ans=min(ans,ans1); 
        }
        return ans; 
    } 
 
    int minDistance(string word1, string word2) { 
        int n=word1.size(); 
        int m=word2.size(); 
        int i=n-1,j=m-1; 
        return f(word1,word2,i,j); 
    } 
};

////////memo
TC:O(N*M)
SC:O(N*M)+O(N+M)
class Solution {
public:
    int f(string word1, string word2,int i,int j,vector<vector<int>>& dp){
        if(i<0){
            //insert
            return j+1;
        }
        if(j<0){
            //delete
            return i+1;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        if(word1[i]==word2[j]){
            return f(word1,word2,i-1,j-1,dp);
        }
        int op1=1+f(word1,word2,i-1,j-1,dp);
        int op2=1+f(word1,word2,i,j-1,dp);
        int op3=1+f(word1,word2,i-1,j,dp);
        return dp[i][j]=min({op1,op2,op3});
    }

    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();
        int i=n-1,j=m-1;
        vector<vector<int>> dp(n,vector<int>(m,-1));
        return f(word1,word2,i,j,dp);
    }
};

///////////tabulatioon
TC:O(N*M)
SC:O(N*M)
class Solution {
public:
    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        for(int j=0;j<=m;j++){
            dp[0][j]=j;
        }
        for(int i=0;i<=n;i++){
            dp[i][0]=i;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(word1[i-1]==word2[j-1]){
                    dp[i][j]=dp[i-1][j-1];
                }
                else{
                    int op1=1+dp[i-1][j-1];
                    int op2=1+dp[i][j-1];
                    int op3=1+dp[i-1][j];
                    dp[i][j]=min({op1,op2,op3});
                }
            }
        }
        return dp[n][m];
    }
};
