//Time Complexity: O( N2 )
//Space Complexity: O(N) where N is the size of HashSet taken for storing the elements
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.size()==0){
            return 0;
        }
        int ans=1;
        for(int i=0;i<s.size();i++){
            unordered_set<char> st;
            for(int j=i;j<s.size();j++){
                if(st.find(s[j])!=st.end()){
                    break;
                }
                st.insert(s[j]);
                ans=max(ans,j-i+1);
            }
        }
        return ans;
    }
};

//optimised approach yet to be done
