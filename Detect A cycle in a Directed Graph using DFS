class Solution {
public:

    bool dfs(int node,vector<vector<int>>& adj,vector<int>& vis,vector<int> &dfsvis){
        vis[node]=1;
        dfsvis[node]=1;
        for(auto it:adj[node]){
            if(!vis[it]){
                if(dfs(it,adj,vis,dfsvis))
                    return true;
            }
            else{
                if(dfsvis[it]==1){
                    return true;
                }
            }
        }
        dfsvis[node]=0;
        return false;
    }

    bool canFinish(int n, vector<vector<int>>& p) {
         vector<vector<int>> adj(n);
         for(auto x:p){
             adj[x[1]].push_back(x[0]);
         }
         vector<int> vis(n,0);
         vector<int> dfsvis(n,0);
         for(int i=0;i<n;i++){
             if(!vis[i]){
                 if(dfs(i,adj,vis,dfsvis)){
                     //if cycle present then can't finish
                     return false;
                 }
             }
         }
         //can finish if no cycle
         return true;
    }
};
