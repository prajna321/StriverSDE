int upper_bound(vector<int> &v,int num){
    int s=0,e=v.size()-1;
    int ans=-1;
    while(s<=e){
        int m=s+(e-s)/2;
        if(v[m]>num){
            ans=m;
            e=m-1;
        }
        else{
            s=m+1;
        }
    }
    return ans;
}
int getMedian(vector<vector<int>> &matrix)
{
    int n=matrix.size();
    int m=matrix[0].size();
    int low = 1e9;
    int high = 1;
    for(int i=0;i<n;i++){
        low=min(low,matrix[i][0]);
        high=max(high,matrix[i][m-1]);
    }
    int medianPos=(n*m+1)/2;
    while(low<=high){
        int mid = low+(high-low)/2;
        int cnt=0;//counts no. of elements<=mid
        for(int i=0;i<n;i++){
            int index=upper_bound(matrix[i],mid); 
            if(index!=-1){
                cnt+=index;
            }
            else{
                cnt+=m;
            }
        }
        if(cnt<medianPos){
            low=mid+1;
        }
        else{
            high=mid-1;
        }
    }
    return low;
}
