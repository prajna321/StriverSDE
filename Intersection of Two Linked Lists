/*
Time complexity: O(m + n)
Space complexity: O(m)
*/

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        set<ListNode*> st;
        ListNode * temp=headA;
        while(temp){
            st.insert(temp);
            temp=temp->next;
        }
        temp=headB;
        while(temp){
            if(st.find(temp)!=st.end()){
                return temp;
            }
            temp=temp->next;
        }
        return NULL;
    }
}; 

Time complexity: O(m + n)
Space complexity: O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *c1=headA;
        ListNode *c2=headB;
        int l1=0,l2=0;
        while(c1){
            l1++;
            c1=c1->next;
        }
        while(c2){
            l2++;
            c2=c2->next;
        }
        int d=abs(l1-l2);
        c1=headA;
        c2=headB;
        if(l1>l2){
            //1 is longer
            while(c1 && d--){
                c1=c1->next;
            }
        }
        else{
            while(c2 && d--){
                c2=c2->next;
            }
        }
        while(c1 && c2){
            if(c1==c2){
                return c1;
            }
            c1=c1->next;
            c2=c2->next;
        }
        return NULL;
    }
};
