//BRUTE FORCE TC: O(1) && SC: O(2N) approach
class MinStack {
public:
    stack<pair<int,int>> st;
    MinStack() {
        
    }
    
    void push(int val) {
        int mn;
        if(st.empty()){
            mn=val;
        }
        else{
            mn=min(val,st.top().second);
        }
        st.push({val,mn});
    }
    
    void pop() {
        st.pop();
    }
    
    int top() {
        return st.top().first;
    }
    
    int getMin() {
        return st.top().second;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
 
 //OPTIMISED TC O(1) SC O(1)
 #define ll long long
class MinStack {
public:
    stack<ll> st;
    ll mini;
    MinStack() {
        while(!st.empty()){
            st.pop();
        }
        mini = INT_MAX;
    }
    
    void push(int val) {
    if (st.empty()) {
        mini = val;
        st.push(val);
    } else {
        if (val < mini) {
            st.push(2LL * val - mini);
            mini = val;
        } else {
            st.push(val);
        }
    }
}
    
    void pop() {
        if(st.empty()){
            return ;
        }
        ll top=st.top();
        st.pop();
        if(top<mini){
            mini=2*mini-top;
        }
    }
    
    int top() {
        if (st.empty()) return -1;
        ll top=st.top();
        if(top<mini){
            //upar me mini change krlia
            return mini;
        }
        return top;
    }
    
    int getMin() {
        return mini;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
