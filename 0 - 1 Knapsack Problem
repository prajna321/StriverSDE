///////////TC:O(N*W)
SC:O(N*W)+O(N)

class Solution
{
    public:
    
    int f(int index,int W, int wt[], int val[], int n, vector<vector<int>>& dp){
        if(index==0){
            if(wt[0]<=W){
                return val[0];
            }
            else{
                return 0;
            }
        }
        if(dp[index][W]!=-1){
            return dp[index][W];
        }
        int notpick=f(index-1,W,wt,val,n,dp);
        int pick=INT_MIN;
        if(wt[index]<=W){
            pick=val[index]+f(index-1,W-wt[index],wt,val,n,dp);
        }
        return dp[index][W]=max(pick,notpick);
    }
    
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       int index=n-1;
       vector<vector<int>> dp(n,vector<int>(W+1,-1));
       return f(index,W,wt,val,n,dp);
    }
};
/////////////TC:O(N*W)
SC:O(N*W)

#include<vector>
class Solution
{
    public:
    
    
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       vector<vector<int>> dp(n,vector<int>(W+1,0));
    
        //Base Condition
    
        for(int i=wt[0]; i<=W; i++){
            dp[0][i] = val[0];
        }
    
        for(int ind =1; ind<n; ind++){
            for(int cap=0; cap<=W; cap++){
                
                int notTaken = 0 + dp[ind-1][cap];
                
                int taken = INT_MIN;
                if(wt[ind] <= cap)
                    taken = val[ind] + dp[ind-1][cap - wt[ind]];
                    
                dp[ind][cap] = max(notTaken, taken);
            }
        }
        
        return dp[n-1][W];
    }
};



