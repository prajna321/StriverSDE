   Time Complexity : O(N^2), The time complexity of the above code is O(N^2) because we are traversing over all
    the substrings and then checking each substring if it is a palindrome or not. There are N^2 substrings and
    checking a substring takes O(1) time, so total time complexity is O(N^2).

    Space Complexity : (N^2), The space complexity of the above code is O(N^2) because we are using the dp array
    in which we are storing whether a substring is a palindrome or not.

class Solution {
public:

    bool isPalindrome(string &s,int start,int end){
        while(start<end){
        if(s[start]!=s[end]){
            return false;
        }
        start++;
        end--;
        }
        return true;
    }

    string longestPalindrome(string s) {
        string ans="";
        for(int i=0;i<s.size();i++){
            for(int j=i;j<s.size();j++){
                if(isPalindrome(s,i,j)){
                    string t=s.substr(i,j-i+1);
                    if(ans.size()<t.size()){
                        ans=t;
                    }
                }
            }            
        }
        return ans;
    }
};

//optimisation https://www.youtube.com/watch?v=fxwvVnBMN6I&ab_channel=CodewithAlisha
diagonal filling of 2d dp
class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.size();
        int maxlength=0;
        string ans="";
        vector<vector<int>> dp(n,vector<int>(n,0));
        //diagonal filling
        for(int diff=0;diff<n;diff++){
            for(int i=0,j=i+diff;j<n;j++,i++){
                if(i==j){
                    dp[i][j]=1;
                }
                else if(diff==1){
                    if(s[i]==s[j]){
                        dp[i][j]=2;
                    }
                    else{
                        dp[i][j]=0;
                    }
                }
                else{
                    if(s[i]==s[j] && dp[i+1][j-1]!=0){
                        dp[i][j]=2+dp[i+1][j-1];
                    }
                }
                if(dp[i][j]){
                    if(j-i+1>maxlength){
                        maxlength=j-i+1;
                        ans=s.substr(i,j-i+1);
                    }
                }
            }
        }
        return ans;
    }
};

