//brute
#include <bits/stdc++.h>

vector<int> majorityElementII(vector<int> &arr)
{
    vector<int> ans;
    int n=arr.size();
    for(int i=0;i<n;i++){
        if(ans.empty() || ans[0]!=arr[i]){
            int cnt=0;
            for(int j=0;j<n;j++){
                if(arr[i]==arr[j]){
                    cnt++;
                }
            }
            if(cnt>n/3){
                ans.push_back(arr[i]);
            }
            if(ans.size()==2){ // take care
                break;
            }
        }
    }
    return ans;
}
///m2 of better (m1 is the more intuitive one with 2 iterations
#include <bits/stdc++.h>

vector<int> majorityElementII(vector<int> &arr)
{
    vector<int> ans;
    unordered_map<int,int> mp;
    int n=arr.size();
    for(int i=0;i<n;i++){
        mp[arr[i]]++;
        if(mp[arr[i]]==(n/3)+1){
            ans.push_back(arr[i]);
        }
        if(ans.size()==2){
            break;
        }
    }
    return ans;
}

//best
class Solution {
public:
    vector<int> majorityElement(vector<int> &arr)
    {
        vector<int> ans;
        int n=arr.size();            
        int el1=INT_MIN,cnt1=0;
        int el2=INT_MIN,cnt2=0;
        for(int i=0;i<n;i++){
            if(cnt1==0 && arr[i]!=el2){
                el1=arr[i];
                cnt1=1;
            }
            else if(cnt2==0 && arr[i]!=el1){
                el2=arr[i];
                cnt2=1;
            }
            else if(arr[i]==el1){
                cnt1++;
            }
            else if(arr[i]==el2){
                cnt2++;
            }
            else{
                cnt1--,cnt2--;
            }
        }
        cnt1=0,cnt2=0;
        for(auto x:arr){
            if(x==el1){
                cnt1++;
            }
            if(x==el2){
                cnt2++;
            }
        }
        if(cnt1>n/3){
            ans.push_back(el1);
        }
        if(cnt2>n/3){
            ans.push_back(el2);
        }
        return ans;
    }
};
