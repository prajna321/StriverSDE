//brute
class Solution {
public:
    int f(int i,int j){
        if(i==0 && j==0){
            return 1;
        }
        if(i<0 || j<0){
            return 0;
        }
        return f(i-1,j)+f(i,j-1);
    }

    int uniquePaths(int m, int n) {
        int i=m-1,j=n-1;
        return f(i,j);
    }
};
//better
class Solution {
public:
    int f(int i,int j,vector<vector<int>>& dp){
        if(i==0 && j==0){
            return 1;
        }
        if(i<0 || j<0){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        return dp[i][j]=f(i-1,j,dp)+f(i,j-1,dp);
    }

    int uniquePaths(int m, int n) {
        int i=m-1,j=n-1;
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return f(i,j,dp);
    }
};
//better 2.0
class Solution {
public:

    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if(i==0 && j==0){
                    dp[i][j]=1;
                }
                else{
                    if(i>0){
                        dp[i][j]+=dp[i-1][j];
                    }
                    if(j>0){
                        dp[i][j]+=dp[i][j-1];
                    }
                }
            }
        }

        return dp[m - 1][n - 1];
    }

};
//optimised
class Solution {
public:
    int uniquePaths(int m, int n) {
        int N=m+n-2;
        int r=m-1;
        double ans=1.0;
        for(int i=1;i<=r;i++){
            ans*=(N-r+i);
            ans/=i;
        }
        return (int)ans;
    }
};
