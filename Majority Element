//brute
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n=nums.size();
        for(int i=0;i<n;i++){
            int cnt=0;
            for(int j=0;j<n;j++){
                if(nums[i]==nums[j]){
                    cnt++;
                }
            }
            if(cnt>n/2){
                return nums[i];
            }
        }
        return 0;//amnite cz You may assume that the majority element always exists in the array.
    }
};

//better
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n=nums.size();
        unordered_map<int,int> mp;
        for(auto x:nums){
            mp[x]++;
        }
        int ans=0;
        for(auto x:mp){
            if(x.second>n/2){
                ans=x.first;
                break;
            }
        }
        return ans;
    }
};
/////optimised
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n=nums.size();
        int el,cnt=0;
        for(int i=0;i<n;i++){
            if(cnt==0){
                el=nums[i];
                cnt=1;
            }
            else if(nums[i]==el){
                cnt++;
            }
            else{
                cnt--;
            }
        }
        //if not give that there will be a sureshot ans
        int count=0;
        for(auto x:nums){
            if(x==el){
                count++;
            }
        }
        if(count>n/2){
            return el;
        }
        return -1;
    }
};
