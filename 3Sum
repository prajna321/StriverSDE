//TC:O(N2LOG M) M=size of hashset
//SC=O(N)+O(M)//st and hashset
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        set<vector<int>> st;
        for(int i=0;i<n;i++){
            set<int> hashset;
            for(int j=i+1;j<n;j++){
                int third=-(nums[i]+nums[j]);
                if(hashset.find(third)!=hashset.end()){
                    vector<int> temp={nums[i],nums[j],third};
                    sort(temp.begin(),temp.end());
                    st.insert(temp);
                }
                hashset.insert(nums[j]);
            }
        }
        vector<vector<int>> ans{st.begin(),st.end()};
        return ans;
    }
};

//TC:O(N2) SC:O(1)
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        int n=nums.size();
        for(int i=0;i<n;i++){
            int a=nums[i];
            int target=-a;
            int s=i+1,e=n-1;
            while(s<e){
                if(nums[s]+nums[e]==target){
                    ans.push_back({a,nums[s],nums[e]});
                    while(s<e && nums[s]==nums[s+1]){
                        s++;
                    }
                    while(s<e && nums[e]==nums[e-1]){
                        e--;
                    }
                    s++,e--;
                }
                else if(nums[s]+nums[e]<target){
                    s++;
                }
                else{
                    e--;
                }
            }
            while(i+1<n && nums[i]==nums[i+1]){
                i++;
            }
        }
        return ans;
    }
};
