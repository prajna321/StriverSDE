////////////recursive TC:Exponential
class Solution{
public:
    int f(int i,int j,int N, int arr[]){
        if(i==j){
            return 0;
        }
        int mini=INT_MAX;
        for(int k=i;k<j;k++){
            int steps=arr[i-1]*arr[k]*arr[j]+f(i,k,N,arr)+f(k+1,j,N,arr);
            mini=min(mini,steps);
        }
        return mini;
    }

    int matrixMultiplication(int N, int arr[])
    {
        int i=1,j=N-1;
        return f(i,j,N,arr);
    }
};
////////memo TC:O(N*N)
class Solution{
public:
    int f(int i,int j,int N, int arr[],vector<vector<int>>& dp){
        if(i==j){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int mini=INT_MAX;
        for(int k=i;k<j;k++){
            int steps=arr[i-1]*arr[k]*arr[j]+f(i,k,N,arr,dp)+f(k+1,j,N,arr,dp);
            mini=min(mini,steps);
        }
        return dp[i][j]=mini;
    }

    int matrixMultiplication(int N, int arr[])
    {
        int i=1,j=N-1;
        vector<vector<int>> dp(N,vector<int>(N,-1));
        return f(i,j,N,arr,dp);
    }
};
