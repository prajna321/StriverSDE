//TC:O(n1+N2)
SC:O(n1+N2)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1==NULL){
            return list2;
        }
        if(list2==NULL){
            return list1;
        }
        ListNode* ans=new ListNode(-1);
        ListNode* mptr=ans;
        while(list1 && list2){
            if(list1->val<=list2->val){
                mptr->next=list1;
                mptr=list1;
                list1=list1->next;
            }
            else{
                mptr->next=list2;
                mptr=list2;
                list2=list2->next;
            }
        }
        if(list1){
            mptr->next=list1;
        }
        if(list2){
            mptr->next=list2;
        }
        return ans->next;
    }
};

//TC:O(n1+N2)
SC:O(1)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* a, ListNode* b) {
        if(!a) return b;
        if(!b) return a;
        if(a->val>b->val){
            ListNode* dummy=a;
            a=b;
            b=dummy;
        }
        ListNode* ans=a;
        while(a && b){
            ListNode* temp=NULL;
            while(a && a->val<=b->val){
                temp=a;
                a=a->next;
            }
            temp->next=b;
            ListNode* dummy=a;
            a=b;
            b=dummy;
        }
        return ans;
    }    
};



