/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> ans;
        queue<pair<TreeNode*,pair<int,int>>> q; //node, {row,col}
        q.push({root,{0,0}});
        map<int,map<int,multiset<int>>>mp;
        while(!q.empty()){
            auto temp=q.front();
            q.pop();
            TreeNode* node=temp.first;
            int row=temp.second.first;
            int col=temp.second.second;
            mp[col][row].insert(node->val);
            if(node->left){
                q.push({node->left,{row+1,col-1}});
            }
            if(node->right){
                q.push({node->right,{row+1,col+1}});
            }
        }
        for(auto col:mp){
            auto colMap=col.second;
            vector<int> level;
            for(auto row:colMap){
                auto mset=row.second;
                level.insert(level.end(),mset.begin(),mset.end());
            }
            ans.push_back(level);
        }
        return ans;
    }
};
