//{ Driver Code Starts
// Initial template for C++

#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template in C++

class Solution 
{
    bool isPossible(int A[], int n1, int B, int mid) {
    int allocatedStudent = 1, pages = 0;
    for (int i = 0; i < n1; i++) {
            if (A[i] > mid) {
                return false;
            }
            if (pages + A[i] <= mid) {
                pages += A[i];
            } 
            else {
                allocatedStudent++;
                pages = A[i];
            }
        }
        if(allocatedStudent>B){
            return false;
        }
        return true;
    }

    public:
    //Function to find minimum number of pages.
    // int findPages(int A[], int n1, int B) 
    // {
    //     int sum=0;
    //     for(int i=0;i<n1;i++){
    //         sum+=A[i];
    //     }
    //     int low=A[0],high=sum;
    //     int ans=-1;
    //     while(low<=high){
    //         int mid=(low+high)>>1;
    //         if(isPossible(A,n1,B,mid)){
    //             ans=mid;
    //             high=mid-1;
    //         }
    //         else{
    //             low=mid+1;
    //         }
    //     }
    //     return ans;
    // }
    int findPages(int A[], int n1, int B) 
    {
        if(n1<B){
            return -1;
        }
        int sum = 0;
        int low =INT_MAX;
        for(int i = 0; i < n1; i++){
            sum += A[i];
            low=min(low,A[i]);
        }
        int high = sum;
        int ans = -1;
        while(low <= high){
            int mid = (low + high) >> 1;
            if(isPossible(A, n1, B, mid)){
                ans = mid;
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        if(ans == -1){
            return -1; // Unable to allocate pages
        }
        return ans;
    }

};

//{ Driver Code Starts.

int main() {
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        int A[n];
        for(int i=0;i<n;i++){
            cin>>A[i];
        }
        int m;
        cin>>m;
        Solution ob;
        cout << ob.findPages(A, n, m) << endl;
    }
    return 0;
}

// } Driver Code Ends
