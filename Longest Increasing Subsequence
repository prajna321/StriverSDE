////////////RECURSIVE
class Solution {
public:
    int f(vector<int>& nums,int index,int prev){
        if(index>=nums.size()){
            return 0;
        }
        //not pick
        int notpick=f(nums,index+1,prev);
        //pick
        int pick=INT_MIN;
        if(prev==-1 || nums[index]>nums[prev]){
            pick=1+f(nums,index+1,index);
        }
        return max(pick,notpick);
    }

    int lengthOfLIS(vector<int>& nums) {
        int index=0;
        int prev=-1;
        return f(nums,index,prev);
    }
};

////////////DP
class Solution {
public:
    int f(vector<int>& nums,int index,int prev,vector<vector<int>>& dp){
        if(index>=nums.size()){
            return 0;
        }
        if(dp[index][prev+1]!=-1){
            return dp[index][prev+1];
        }
        //not pick
        int notpick=f(nums,index+1,prev,dp);
        //pick
        int pick=INT_MIN;
        if(prev==-1 || nums[index]>nums[prev]){
            pick=1+f(nums,index+1,index,dp);
        }
        return dp[index][prev+1]=max(pick,notpick);
    }

    int lengthOfLIS(vector<int>& nums) {
        int index=0;
        int prev=-1;
        int n=nums.size();
        vector<vector<int>> dp(n,vector<int>(n+1,-1));
        return f(nums,index,prev,dp);
    }
};
