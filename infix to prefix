//similar to infix to postfix just have to reverse the order

#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int prec(char ch) {
        if (ch == '^') {
            return 3;
        } else if (ch == '/' || ch == '*') {
            return 2;
        } else if (ch == '+' || ch == '-') {
            return 1;
        }
        return -1;
    }

    // Function to convert an infix expression to a prefix expression.
    string infixToPrefix(string s) {
        string result = "";
        stack<char> st;
        reverse(s.begin(), s.end());  // Reverse the input expression

        for (int i = 0; i < s.size(); i++) {
            char ch = s[i];
            if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9')) {
                result += ch;
            } else if (ch == ')') {
                st.push(ch);
            } else if (ch == '(') {
                while (!st.empty() && st.top() != ')') {
                    result += st.top();
                    st.pop();
                }
                if (!st.empty())
                    st.pop();  // Remove the closing parenthesis
            } else {
                while (!st.empty() && prec(st.top()) > prec(ch)) {
                    result += st.top();
                    st.pop();
                }
                st.push(ch);
            }
        }

        while (!st.empty()) {
            result += st.top();
            st.pop();
        }

        reverse(result.begin(), result.end());  // Reverse the result to get the prefix expression
        return result;
    }
};

// Driver program to test above functions
int main() {
    int t;
    cin >> t;
    cin.ignore(INT_MAX, '\n');
    while (t--) {
        string exp;
        cin >> exp;
        Solution ob;
        cout << ob.infixToPrefix(exp) << endl;
    }
    return 0;
}
