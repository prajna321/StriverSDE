/////recursive
#define ll long long
class Solution {
public:
    ll f(vector<vector<int>>& grid,ll i,ll j){
        if(i==0 && j==0){
            return grid[0][0];
        }
        if(i<0 || j<0){
            return LONG_MAX;
        }
        ll up=LONG_MAX;
        if(i-1>=0){
            up=grid[i][j]+f(grid,i-1,j);
        }
        ll left=LONG_MAX;
        if(j-1>=0){
            left=grid[i][j]+f(grid,i,j-1);
        }
        return min(up,left);
    }

    int minPathSum(vector<vector<int>>& grid) {
        ll n=grid.size();
        ll m=grid[0].size();
        ll i=n-1,j=m-1;
        return f(grid,i,j);
    }
};
////memo
TC:O(N*M)
SC:O(N*M)+O(PATH LENGTH=(N-1)+(M-1))
#define ll long long
class Solution {
public:
    ll f(vector<vector<int>>& grid, ll i, ll j, vector<vector<ll>>& dp) {
        if (i == 0 && j == 0) {
            return grid[0][0];
        }
        if (i < 0 || j < 0) {
            return 1e9;  // Updated sentinel value
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        ll up = grid[i][j] + f(grid, i - 1, j, dp);
        ll left = grid[i][j] + f(grid, i, j - 1, dp);
        return dp[i][j] = min(up, left);
    }

    int minPathSum(vector<vector<int>>& grid) {
        ll n = grid.size();
        ll m = grid[0].size();
        ll i = n - 1, j = m - 1;
        vector<vector<ll>> dp(n, vector<ll>(m, -1));
        return f(grid, i, j, dp);
    }
};

////////tabulation
TC:O(N*M)
SC:O(N*M)
#define ll long long
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        ll n = grid.size();
        ll m = grid[0].size();
        vector<vector<ll>> dp(n, vector<ll>(m, 0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 && j==0){
                    dp[i][j]=grid[0][0];
                }
                else{
                    int up=1e9;
                    if(i>0){
                        up=grid[i][j]+dp[i-1][j];
                    }
                    int left=1e9;
                    if(j>0){
                        left=grid[i][j]+dp[i][j-1];
                    }
                    dp[i][j]=min(up,left);
                }
            }
        }
        return dp[n-1][m-1];
    }
};
